package jPBC;  
  
import it.unisa.dia.gas.jpbc.*;  
import it.unisa.dia.gas.plaf.jpbc.pairing.PairingFactory;  
import java.lang.reflect.Proxy;  
import java.util.Calendar;  
import java.text.SimpleDateFormat;  
import java.util.Date;  
  
public class BasicIdent2 implements Ident {  
  
    private Element g,h,a,b, T1, T2;  
    private Field G1, Zr;  
    private Pairing pairing;  
  
    public BasicIdent2() {  
        init();  
    }  
  
    /** 
    * 
    */  
    private void init() {  
        pairing = PairingFactory.getPairing("a.properties");//  
        PairingFactory.getInstance().setUsePBCWhenPossible(true);  
        checkSymmetric(pairing);  
        //   
        Zr = pairing.getZr();  
        a = Zr.newElement(); 
        b = Zr.newElement();
        //
     //   System.out.println("r=" + r); 
        G1 = pairing.getG1();  //return G1
        g = G1.newElement();  //initial Ppub as element of G1
        h = G1.newElement();  
        //Su = G1.newElement();  
        //V = G1.newElement();  
        // 
        Field GT = pairing.getGT();  
        T1 = GT.newElement();  
        T2 = GT.newElement();  
    }  
  
    /** 
     *  
     *  
     * @param pairing 
     */  
    private void checkSymmetric(Pairing pairing) {  
        if (!pairing.isSymmetric()) {  
            throw new RuntimeException("密钥不对称!");  
        }  
    }  
  
    @Override  
    public void buildSystem() {  
        System.out.println("-------------------系统建立阶段----------------------");  
        a = Zr.newRandomElement().getImmutable();// //随机生成主密钥s  
        b = Zr.newRandomElement().getImmutable();
        g = G1.newRandomElement().getImmutable();// 生成G1的生成元P
        h = G1.newRandomElement().getImmutable();
        //Ppub = P.mulZn(s);// è计算Ppub=sP,注意顺序  
        g = g.powZn(a).getImmutable();
        h = h.powZn(b).getImmutable();
        System.out.println("g=" + g);   
        System.out.println("h=" + h);  
      // System.out.println("s=" + s);  
       // System.out.println("Ppub=" + Ppub);  
    }  
  
    @Override  
    public void extractSecretKey() {  
        System.out.println("-------------------密钥提取阶段----------------------");  
        //Qu = pairing.getG1().newElement().setFromHash("4WayHandShake".getBytes(), 0, 13)  
        //        .getImmutable();// //从长度为3的Hash值IDu确定用户U产生的公钥Qu 
       // System.out.println("Qu=" + Qu); //delete
       // Su = Qu.mulZn(s).getImmutable(); 
        //System.out.println("s=" + s); //delete
        System.out.println("a=" + a);  
        System.out.println("b=" + b);  
    }  
  
    @Override  
    public void encrypt() {  
        System.out.println("-------------------加密阶段----------------------");  
       // r = Zr.newRandomElement().getImmutable();  
       // V = P.mulZn(r);  
        T1 = pairing.pairing(g, h).getImmutable();// 计算e（Ppub,Qu）  
        //T1 = T1.powZn(r).getImmutable();  
        System.out.println("g=" + g);  
        System.out.println("h=" + h);  
        System.out.println("T1=e（Ppub,Qu）^r=" + T1);  
    }  
  
    @Override  
    public void decrypt() {  
        System.out.println("-------------------解密阶段----------------------");  
        T2 = pairing.pairing(g, h).getImmutable();  
        a = a.powZn(b).getImmutable();
        T2 =T2.powZn(a).getImmutable();
        System.out.println("T2=e(V,Su)=" + T2);  
       // int byt = V.getLengthInBytes();// 求V的字节长度，假设消息长度为128字节‚  
       // System.out.println("文本长度¦" + (byt + 128));  
    }  
  
    public static void main(String[] args) {  
        BasicIdent2 ident = new BasicIdent2();  
        // 动态代理，统计各个方法耗时   
        Ident identProxy = (Ident) Proxy.newProxyInstance(  
                BasicIdent2.class.getClassLoader(),  
                new Class[] { Ident.class }, new TimeCountProxyHandle(ident));  
  
        identProxy.buildSystem();  
        identProxy.extractSecretKey();  
        identProxy.encrypt();  
        identProxy.decrypt();  
    }  
  
}  
