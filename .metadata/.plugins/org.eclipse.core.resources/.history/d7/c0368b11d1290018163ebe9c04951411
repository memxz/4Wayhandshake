package jPBC;  
  
import it.unisa.dia.gas.jpbc.*;  
import it.unisa.dia.gas.plaf.jpbc.pairing.PairingFactory;  
import java.lang.reflect.Proxy;  
import java.util.Calendar;  
import java.text.SimpleDateFormat;  
import java.util.Date;  
  
public class BasicIdent2 implements Ident {  
  
    private Element s, r, P, Ppub, Su, Qu, V, T1, T2;  
    private Field G1, Zr;  
    private Pairing pairing;  
  
    public BasicIdent2() {  
        init();  
    }  
  
    /** 
    * 
    */  
    private void init() {  
        pairing = PairingFactory.getPairing("a.properties");//  
        PairingFactory.getInstance().setUsePBCWhenPossible(true);  
        checkSymmetric(pairing);  
        //   
        Zr = pairing.getZr();  
        r = Zr.newElement();  
        //
        G1 = pairing.getG1();  
        Ppub = G1.newElement();  
        Qu = G1.newElement();  
        Su = G1.newElement();  
        V = G1.newElement();  
        // 
        Field GT = pairing.getGT();  
        T1 = GT.newElement();  
        T2 = GT.newElement();  
    }  
  
    /** 
     *  
     *  
     * @param pairing 
     */  
    private void checkSymmetric(Pairing pairing) {  
        if (!pairing.isSymmetric()) {  
            throw new RuntimeException("密钥不对称!");  
        }  
    }  
  
    @Override  
    public void buildSystem() {  
        System.out.println("-------------------系统建立阶段----------------------");  
        s = Zr.newRandomElement().getImmutable();// //éš�æœºç”Ÿæˆ�ä¸»å¯†é’¥s  
        P = G1.newRandomElement().getImmutable();// ç”Ÿæˆ�G1çš„ç”Ÿæˆ�å…ƒP  
        Ppub = P.mulZn(s);// è®¡ç®—Ppub=sP,æ³¨æ„�é¡ºåº�  
        System.out.println("P=" + P);  
        System.out.println("s=" + s);  
        System.out.println("Ppub=" + Ppub);  
    }  
  
    @Override  
    public void extractSecretKey() {  
        System.out.println("-------------------å¯†é’¥æ��å�–é˜¶æ®µ----------------------");  
        Qu = pairing.getG1().newElement().setFromHash("IDu".getBytes(), 0, 3)  
                .getImmutable();// //ä»Žé•¿åº¦ä¸º3çš„Hashå€¼IDuç¡®å®šç”¨æˆ·Uäº§ç”Ÿçš„å…¬é’¥Qu  
        Su = Qu.mulZn(s).getImmutable();  
        System.out.println("Qu=" + Qu);  
        System.out.println("Su=" + Su);  
    }  
  
    @Override  
    public void encrypt() {  
        System.out.println("-------------------åŠ å¯†é˜¶æ®µ----------------------");  
        r = Zr.newRandomElement().getImmutable();  
        V = P.mulZn(r);  
        T1 = pairing.pairing(Ppub, Qu).getImmutable();// è®¡ç®—eï¼ˆPpub,Quï¼‰  
        T1 = T1.powZn(r).getImmutable();  
        System.out.println("r=" + r);  
        System.out.println("V=" + V);  
        System.out.println("T1=eï¼ˆPpub,Quï¼‰^r=" + T1);  
    }  
  
    @Override  
    public void decrypt() {  
        System.out.println("-------------------è§£å¯†é˜¶æ®µ----------------------");  
        T2 = pairing.pairing(V, Su).getImmutable();  
        System.out.println("e(V,Su)=" + T2);  
        int byt = V.getLengthInBytes();// æ±‚Vçš„å­—èŠ‚é•¿åº¦ï¼Œå�‡è®¾æ¶ˆæ�¯é•¿åº¦ä¸º128å­—èŠ‚  
        System.out.println("æ–‡æœ¬é•¿åº¦" + (byt + 128));  
    }  
  
    public static void main(String[] args) {  
        BasicIdent2 ident = new BasicIdent2();  
        // åŠ¨æ€�ä»£ç�†ï¼Œç»Ÿè®¡å�„ä¸ªæ–¹æ³•è€—æ—¶  
        Ident identProxy = (Ident) Proxy.newProxyInstance(  
                BasicIdent2.class.getClassLoader(),  
                new Class[] { Ident.class }, new TimeCountProxyHandle(ident));  
  
        identProxy.buildSystem();  
        identProxy.extractSecretKey();  
        identProxy.encrypt();  
        identProxy.decrypt();  
    }  
  
}  
